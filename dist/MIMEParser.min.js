var t,e,s,n,i,o,r=this&&this.__classPrivateFieldGet||function(t,e){if(!e.has(t))throw new TypeError("attempted to get private field on non-instance");return e.get(t)},a=this&&this.__classPrivateFieldSet||function(t,e,s){if(!e.has(t))throw new TypeError("attempted to set private field on non-instance");return e.set(t,s),s};export default class{constructor(h){t.set(this,"/"),e.set(this,";"),s.set(this,"="),n.set(this,void 0),i.set(this,void 0),o.set(this,void 0);const l=h.trim(),c=l.indexOf(r(this,t));if(-1===c)throw new Error("The specified string does not contain a slash.");const u=l.substring(0,c);if(""===u)throw new Error("The `type` is the empty string.");if(!this._solelyContainHTTPTokenCodePoints(u))throw new Error("The `type` contains an invalid string.");const T=c+1,d=l.indexOf(r(this,e)),f=-1!==d,p=f?l.substring(T,d).trimEnd():l.substring(T);if(""===p)throw new Error("The `subtype` is the empty string.");if(!this._solelyContainHTTPTokenCodePoints(p))throw new Error("The `subtype` contains an invalid string.");const g=new Map;if(f){const t=d+1,n=l.substring(t);for(const t of n.split(r(this,e)).map((t=>t.trim()))){const e=t.indexOf(r(this,s));if(-1===e)continue;const n=e+1,i=t.substring(0,e).toLowerCase();let o=t.substring(n);if(o.startsWith('"'))o=this._collectHTTPQuotedString(o);else if(""===o)continue;""!==i&&this._solelyContainHTTPTokenCodePoints(i)&&this._solelyContainHTTPQuotedStringTokenCodePoints(o)&&!g.has(i)&&g.set(i,o)}}a(this,n,u.toLowerCase()),a(this,i,p.toLowerCase()),a(this,o,g)}toString(){let t=this.getEssence();for(const[e,s]of r(this,o))t+=`;${e}=`,""!==s&&this._solelyContainHTTPTokenCodePoints(s)?t+=s:t+=`"${s.replace(/(["\\])/g,"\\$&")}"`;return t}getType(){return r(this,n)}getSubtype(){return r(this,i)}getEssence(){return`${r(this,n)}${r(this,t)}${r(this,i)}`}getParameters(){return r(this,o)}_solelyContainHTTPTokenCodePoints(t){return/^[!#$%&'*+\-.^_`|~0-9A-Za-z]*$/.test(t)}_solelyContainHTTPQuotedStringTokenCodePoints(t){return/^[\t\u0020-\u007E\u0080-\u00FF]*$/.test(t)}_collectHTTPQuotedString(t){const e=t.length;let s=1,n="";for(;s<e;){for(;s<e&&'"'!==t[s]&&"\\"!==t[s];)n+=t[s],s++;const i=t[s];if(s++,"\\"!==i)break;if(s>=e){n+="\\";break}n+=t[s],s++}return n}}t=new WeakMap,e=new WeakMap,s=new WeakMap,n=new WeakMap,i=new WeakMap,o=new WeakMap;
//# sourceMappingURL=MIMEParser.min.js.map